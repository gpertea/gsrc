#!/usr/bin/perl
use strict;
use FindBin;

umask 0002;
#the line below is needed if pvmsx is used
# also, the error condition is set only by the presence of $file 
$ENV{'PATH'}=$FindBin::Bin.':'.$ENV{'PATH'};

#so for pvmsx to consider the task was successful, $file must be deleted!
#============== 
# 1 is the name of the fasta sequence input file
# 2 is the # of sequences in ${1} should = 1 for this script
# 3 is the slice no. being processed by sx
# 4 is 0 if not the last file, 1 if the last file
# 5 is the # of sequences skipped initially
# 6 is the # of sequences to be processed (-1 = ALL)
# 7 user parameter
#     1        2        3         4          5       6    
my ($file, $numpass, $slice_num, $last, $skipped, $total, $gfa)=@ARGV;
#print STDERR "running: $0 ".join(' ',@ARGV)."\n";
my $usage=q{
Slice processing script for exonerate protein2dna model client option
Never use without a parent controllers (e.g. gridx).
Must start the server prior to running this gridx command.
Usage example: 
  gridx -q -N -O logs -g condor -p 20 -n 3000 -i proteindb.fa exonerate_p2g.psx /full/path/to/genomicDNA.fa
}; 

die $usage."\n (genome file='$gfa', qslice='$file')\n" unless (-f $gfa) && (-s $file);
my $fout=$file.'.gff3';
my $fexout=$file.'.exo';
my $log_file='log_std';
my $err_file='err_log';
open(STDERR, '>>'.$err_file);
open(STDOUT, '>>'.$log_file);

my $cmd="exonerate.icc $file $gfa  -V 0 --model p2g --percent 20 -n 11 --showalignment no --saturatethreshold 80 ".
 "--ryo '".'%ti\t%qi\tmap_end\t%r\t%ql|%qab-%qae\t%ps\t%g\t%qd\n'."' --geneseed 60 -x 50 --proteinwordlen 4 ".
 "--seedrepeat 2 --maxintron 400000 -M 512 --showtargetgff yes --showvulgar no > $fexout";

#my $cmd="gmap -D $dbdir -d $gmapdb -B 2 -f 1 $file > $gmap_res";
my $slno=sprintf("slice:%09d",$slice_num);
print STDERR ">>$slno: $cmd\n";
&runCmd($cmd, $fexout);
if (-s $fexout) {
  $cmd="fltexonerate -p70 -c70 < $fexout > $fout";
  &runCmd($cmd, $fout);
  }
print STDERR "<<$slno: done.\n";
unlink($file);
exit 0;

sub runCmd {
my ($docmd, @todel) = @_;
my $errmsg = `( $docmd ) 2>&1`;
my $errcode=$?;
my @cores=<core.*>;
if ($errcode || @cores>0 || ($errmsg=~/error|segmentation|violation/si) || ($errmsg=~/\bfail/si)) {
  print STDERR "!Error at:\n$docmd\n";
  print STDERR "$errmsg\n";
  foreach (@todel) {
    unlink($_);
    }
  exit(1);
  }
}
