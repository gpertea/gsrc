#!/usr/bin/perl
use strict;
use FindBin;
#use Cwd qw(abs_path cwd);

umask 0002;
#the line below is needed if pvmsx is used
# also, the error condition is set only by the presence of $file 
#$ENV{'PATH'}=$FindBin::Bin.':'.$ENV{'PATH'};

my $usage=q{
 gridx/psx slice processing script - never use by itself.


 gridx -U -p20 -n1 -i <input_genomicseqs.fasta> glimmer_run.psx <train_data_dir> <protein_domains_dir>

 The directories should be given as a full, absolute path
 
 Usage examples:

 gridx -U -p20 -n1 -i allChr_mrg.fa glimmer_run.psx \
   /fs/szannotation/zebrafish/genefinding/training \
   /fs/szannotation/zebrafish/genefinding/domains
};


#so for pvmsx to consider the task was successful, $file must be deleted!
#============== 
# 1 is the name of the fasta sequence input file
# 2 is the # of sequences in ${1} should = 1 for this script
# 3 is the slice no. being processed by sx
# 4 is 0 if not the last file, 1 if the last file
# 5 is the # of sequences skipped initially
# 6 is the # of sequences to be processed (-1 = ALL)
# 7 user parameter
#     1        2        3         4          5       6    
my ($file, $numpass, $slice_num, $last, $skipped, $total, $traindir, $pdomdir)=@ARGV;

die "$usage\n Cannot find $traindir or $pdomdir\n" unless @ARGV>6 && -d $traindir && -d $pdomdir;

#$traindir=abs_path($traindir);
#$pdomdir=abs_path($pdomdir);
my $log_file='log_std';
my $err_file='err_log';
open(STDERR, '>>'.$err_file);
open(STDOUT, '>>'.$log_file);

open(INFILE, $file) || die("Cannot open input file $file\n");
my $seqname;
while (<INFILE>) {
 ( $seqname )=(m/^>(\S+)/);
 last if $seqname;
 } 
close(INFILE);

$seqname=~tr/,|:;/____/;

unless (-f "$pdomdir/$seqname.domains") {
 print STDERR "WARNING: protein domains info file ($seqname.domains) not found! Genefinding aborted.\n";
 exit;
 }

#my $toskip=($file =~ m/_\@(\d+)_v\d+\.\d+/) ? $1 : $skipped+$numpass*($slice_num-1);
my $outprefix=$seqname.'.glimmerhmm_pred';
my $cmd.="glimmerhmm $file $traindir -p $pdomdir -g -f -o $outprefix -n 5";
my $slno=sprintf("slice:%09d",$slice_num);
print STDERR ">>$slno: $cmd\n";
&runCmd($cmd);

print STDERR "<<$slno: done.\n";

unlink($file);
exit 0;

sub runCmd {
my ($docmd, @todel) = @_;
my $errmsg = `($docmd) 2>&1`;
if ($? || ($errmsg=~/ERROR/si) || ($errmsg=~/Segmentation/si) || ($errmsg=~/Failed/s) || $errmsg=~/Invalid/s) {
  print STDERR "!Error at:\n$docmd\n";
  print STDERR "$errmsg\n";
  unlink(@todel);
  exit(1);
  }
}
