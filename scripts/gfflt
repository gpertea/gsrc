#!/usr/bin/perl
use strict;
use Getopt::Std;
use FindBin;use lib $FindBin::Bin;

my $usage = q/Usage:
gfflt [-c <mincov>] [-p <minpid>] [-P] [-l <fsize_file>] [-s<strand>][{-C|-E}] \
  [-D|-T] [-f <ftstr>] [-t <track>] [-r <start>-<end>] [-n<ID_suffix>] \
  [-i <maxintron>] [-u dupIDs.tab] [-w <map_out_file>] [-o <outfile>]

 Note: requires segment subfeatures (CDS\/exons) to be strictly 
       grouped with (i.e. follow) their parent mRNA feature

 -l    : file with extra mapping information, 3 tab-delimited columns
         are expected in each line: 
         <qry_ID> <qry_len> <qry_description>
 -P    : only for PMAP output files, take "Target" coordinates
         as nucleotide-based (divide by 3 to get the actual query protein
         coordinates)
         
Filtering options:
 -r    : only show gff records fully included in between the given coordinates
 -R    : like -r but also show mappings that intersect the given range
 -s    : only show gff records on the given strand
 -u    : duplicate IDs should be discarded according to the given ID table
 -c    : discard mappings with coverage lower than <mincov>;
         unless qreg or qlen attributes are found in the mRNA line,
         this option requires the -l option to provide query lengths
 -p    : discard mappings with percent identity lower than <minpid>;
         requires the score column or the PID attribute for the 'mRNA' 
         feature
 -x    : discard exon mappings with percent identity lower than <xminpid>;
        (coverage and percent identity will be adjusted accordingly)
 -C|-E : read only the CDS (-C) or only the exon segments (-E)
         from the input file (default: read both);
Output modifiers:

  -f   : replace the output segment feature name ("CDS" or "exon")
         with this string (useful for converting "CDS" into "exon" or
         the other way around); requires -C or -E option
  -n   : add the given alphanumeric suffix followed by a counter
         for each mapping of a query sequence (starting at 1)
         (only the first 4 letters of <ID_suffix> will be used)
  -N   : for -n option, the whole ID is replaced with the given string
  -M   : make the "Name" attribute to have the same value with "ID" attribute
  -t   : change the track name (2nd GFF column) into given label
  -D   : add mapping descriptions ("descr=" attribute) as found in the
         3rd column of the <fsize_file> (so it requires -l option)
  -V   : add "cov" and "pid" attributes to the mRNA lines if possible 
         and if not there already
  -S   : strip the output of any other attributes besides ID, Parent and Name
  -T   : write GTF format instead (this is incompatible with -D and -V)
  
/;
umask 0002;
my @inputfiles;
while ($ARGV[0] && $ARGV[0]!~m/^\-/) {
  push(@inputfiles, shift(@ARGV));
  }
getopts('i:t:r:R:l:s:c:x:p:w:f:u:n:o:PMSNCEDTV') || die($usage."\n");
unshift(@ARGV, @inputfiles) if @inputfiles>0;
#-- options
my $outfile=$Getopt::Std::opt_o;
my $dupfile=$Getopt::Std::opt_u;
my $maxintron=$Getopt::Std::opt_i || 450000;
my $stripAttrs=$Getopt::Std::opt_S;
my $fullRename=$Getopt::Std::opt_N;
my $resetName=$Getopt::Std::opt_M;
my $globalCounter=0;
my $inFeat;
$inFeat='exon' if $Getopt::Std::opt_E;
$inFeat='CDS' if $Getopt::Std::opt_C;
my $pmap=$Getopt::Std::opt_P;
my %dups; #duplicate IDs are kept here -- $dups{$id} => $mainid
my %uniq; #key is ctgid_qryid_startcoord_endcoord_covscore
#my $startOnly=$Getopt::Std::opt_S;
my ($minpid, $mincov, $addCounter, $addDescr, $outFeat, $GTF)=
 ($Getopt::Std::opt_p, $Getopt::Std::opt_c, $Getopt::Std::opt_n, 
  $Getopt::Std::opt_D, $Getopt::Std::opt_f, $Getopt::Std::opt_T);
my $g_range = $Getopt::Std::opt_r || $Getopt::Std::opt_R;
my $xrange = 1 if ($g_range && $Getopt::Std::opt_R);
my ($mincoord, $maxcoord);
if ($g_range) {
  ($mincoord, $maxcoord)=($g_range=~m/^(\d*)[\.\-_]+(\d*)$/);
  $mincoord=1 unless $mincoord>0;
  $maxcoord=4000000000 unless $maxcoord>0;
  #print STDERR "range filter: $mincoord .. $maxcoord\n";
  }
my $fltstrand=$Getopt::Std::opt_s;
my $xminpid = $Getopt::Std::opt_x;
my $ntrack=$Getopt::Std::opt_t;
$mincov=~tr/%//d;
$mincov=1 unless $mincov;
$minpid=20 unless $minpid;
$minpid=20 unless $minpid;
$xminpid=12 unless $xminpid;
my $fmapout=$Getopt::Std::opt_w;
if ($fmapout) {
 open(FMAP, '>'.$fmapout) || die("Error creating file $fmapout\n");
 }
my $fsizefile=$Getopt::Std::opt_l;
my %f;
my %n;
if ($fsizefile) {
  open(FSIZE, $fsizefile) || die("Error opening query info file $fsizefile!\n");
  while(<FSIZE>) {
    chomp;
    my @t=split(/\s+/,$_,3);
    next unless $t[1];
    $f{$t[0]}=[$t[1], $t[2]]; # seqlen, description
    }
  close(FSIZE);
  }
if ($dupfile) {
 open(DUPFILE, $dupfile) || die ("Error opening duplicate table file $dupfile!\n");
 while (<DUPFILE>) {
   chomp;
   my @t=split(/\t/);
   foreach my $id (@t) {
      $dups{$id}=$t[0];
      }
   }
 close(DUPFILE);
 }  
my $curqry; #current target (query) name
my ($curqstart, $curqend, $curqlen, $curcov, $curpid, $use_tcoords); #length of the current query
my $curdescr; #defline of the current query
my $covlen; #coverage of current query
my $eScore; #cummulated exon score
my ($gffid, $gchr, $gtrack, $gname, $gstart, $gend, $gscore, $gstrand, $ginfo);
#                       0          1        2       3      4      5        6
my @exd; # list of [exon_start, exon_end, phase, score, qstart, qend, exon_other_attrs]
my @cds; # list of [cds_start, cds_end,   phase, score, qstart, qend, cds_other_attrs]
if ($outfile) {
 open(OUTFILE, '>'.$outfile) || die ("Error creating file $outfile\n");
 select(OUTFILE);
 }
while (<>) {
 next if m/^\s*#/;
 chomp;
 my ($chr, $binfo, $ftype, $fstart, $fend, $fscore,
      $strand, $phase, $finfo)=split(/\t/);
 next if $ftype eq 'gene'; # just discard the superfluous 'gene' entries;
 if ($ftype eq 'mRNA') { #start of a new mapping
    &flush_gbuf();
    ($gchr, $gtrack, $gstart, $gend, $gscore, $gstrand, $ginfo)=
     ($chr,  $binfo,  $fstart, $fend, $fscore, $strand, $finfo);
    ($gffid)=($ginfo=~m/ID=([^;]+)/);
    die("Error finding the current ID (in attribute field: $finfo)\n") unless $gffid;
    $ginfo=~s/ID=[^;]+\s*;?//;
    $ginfo=~s/Parent=[^;]+\s*;?//;
    if ($ginfo=~s/Name=([^;]+)\s*;?//) {
      $gname=$1;
      }
    if ($ginfo=~m/qlen=(\d+)/i) {
      $curqlen=$1;
      $ginfo=~s/qlen=\d+\s*;?//i;
      }
    if ($ginfo=~m/qreg=(\d+)\-(\d+)/i) {
      ($curqstart, $curqend)=($1,$2);
      $curqstart=1 if $curqstart==0;
      if ($ginfo=~m/qreg=\d+\-\d+\|(\d+)/i) {
         $curqlen=$1;
         $ginfo=~s/qreg=\d+\-\d+\|\d+\s*;?//i;
         }
        else {
         $ginfo=~s/qreg=\d+\-\d+\s*;?//i;
         }
      }
    if ($ginfo=~m/cov=([\d\.]+)/i) {
      $curcov=$1;
      $ginfo=~s/cov=[\d\.]+\s*;?//i;
      }
    if ($ginfo=~m/\bpid=([\d\.]+)/i) {
      $curpid=$1;
      $ginfo=~s/\bpid=[\d\.]+\s*;?//i;
      }
    if ($fscore>50 && $fscore<=100 && !$curpid) {
      $curpid=$fscore;
      }
    next;
    } # mRNA line 
 # vvvvvvvvv  exons or CDS segments vvvvvvvvvvv
 $ftype=~s/\w+\-exon$/exon/i; #jigsaw
 next unless $ftype eq 'exon' || $ftype eq 'CDS';
 my $gtfgeneid;
 my $id;
 if ($finfo=~m/(?:Parent|transcript_id)[=\s]+"?([^;^\s^"]+)/) {
   $id=$1;
   unless ($finfo=~s/Parent=[^;]+\s*;?//) {
      #must be GTF format -- discard anything else but the gene_id, if found;
      ($gtfgeneid)=($finfo=~m/gene_id[=\s]+"?([^;^\s^"]+)/);
      # we could parse all extra GTF attributes here and rebuild them in GFF3 format..
      # .. nah
      $finfo="";
      }
   }
  else { # jigsaw and other over-simplified GFF formats
   my ($geneid)=($finfo=~m/gene_id[=\s]+"?([^;^\s^"]+)/);
   if ($geneid) {
     $id=$geneid;
     $finfo="";
     }
    else {
     ($id)=($finfo=~m/^([^;^\s]+)/);
     if ($binfo=~m/^jigsaw/) {
          ($finfo)=($finfo=~m/(gene_score=[\-\d\.]+)/);
          }
      else { $finfo=""; }
    }
   }
 die("Error getting the current ID from attribute field: $finfo\n") unless $id;
 $finfo=~s/ID=[^;]+\s*;?//;
 $finfo=~s/Name=([^;]+)\s*;?//;
 if (!$gffid || ($gffid ne $id) || ($gchr && $gchr ne $chr)) {
   # start of new mapping here (change in gff ID or base sequence)
   #print STDERR "gffid=$gffid, id=$id (gchr=$gchr)\n";
   &flush_gbuf();
   ($gchr, $gtrack, $gstart, $gend, $gscore, $gstrand, $ginfo)=
     ($chr,  $binfo,  $fstart, $fend, $fscore, $strand, $finfo);
   $ginfo=~s/Target=[^;]+\s*;?//i;
   $ginfo=~s/qreg=\d+\-\d+\s*;?//i;
   $gname=$gtfgeneid;
   }
 $finfo=~s/gene_score=[\-\d\.]+\s*\;?//i;
 $gffid=$id;
 my ($target, $t1, $t2, $tstrand);
 if ($finfo=~m/Target=([^;]+)/i) {
   my $alninfo=$1;
   ($target, $t1, $t2, $tstrand)=($alninfo=~m/^(\S+)\s+(\d+)\s+(\d+)\s+([\-+])/);
   $finfo=~s/Target=[^;]+\s*;?//i;
   $use_tcoords=1;
   }
  else {
    if ($finfo=~m/qreg=(\d+)\-(\d+)/i) {
      ($t1,$t2)=($1,$2);
      $t1=1 if $t1==0;
      $finfo=~s/qreg=\d+\-\d+\s*;?//i;
      }
   $target=$gffid;
   $target=~s/\.[a-z]{1,5}\d+$//;
   }
 if ($curqry) {
   die("Error: CDS/exon Target entry found out of place ($_)\n")
              if ($target ne $curqry);
   }
  else {
    $curqry=$target; #first time assignment of curqry
    if ($fsizefile) {
         # if ($mincov) {
         my $qd=$f{$curqry};
         die("Error getting data for $curqry from $fsizefile!\n") unless $qd;
         ($curqlen, $curdescr)=@$qd;
         #print STDERR "=====> descr for $curqry: $curdescr\n";
         }
    $covlen=0;
    } # first time assignment of curqry
   $phase='.' if $phase<0;
   ($fstart, $fend)=($fend, $fstart) if $fend<$fstart;
   ($t1, $t2)=($t2, $t1) if ($t2<$t1);
   if ($t2 && $pmap) { 
      ($t1, $t2)=(int($t1/3), int($t2/3));
      $t1=1 if $t1<1;
      };
   if ($ftype eq 'exon') {
     #              0        1     2         3       4   5      6
     push(@exd, [$fstart, $fend, $phase,  $fscore, $t1, $t2, $finfo]);
     next;
     }
    else { # ftype must be CDS here
     # --exon entries should come first ?
     #  die("Error: missing query heading for: $_\n") unless $curqry;
     #next if ($minpid && $fscore<$minpid);
     push(@cds, [$fstart, $fend, $phase, $fscore, $t1, $t2, $finfo]);
     }
} # line parsing loop

flush_gbuf() if $curqry;
select(STDOUT);
close(OUTFILE) if ($outfile);
close(FMAP) if ($fmapout);
# END here

#================ SUBROUTINES ============

sub flush_gbuf {
  return unless $gffid;
  check_gff();
  ($gffid, $curqry, $curqlen, $covlen, $curqstart, $curqend, $curcov, $curpid, $use_tcoords)=
   (undef, undef,    0,        0,         0,            0,      0,      0, 0);
  ($gchr, $gtrack, $gstart, $gend, $gscore, $gstrand, $gname, $ginfo)=(undef) x 8;
  @exd=();
  @cds=();
  $eScore=0;
}

sub check_gff {
 #die ("Error at calling flush_gbuf(): current length must NOT be zero!\n") unless $curqlen>0;
 #$covlen=$covlen/3 if $pmap;
 #my $cov=$curqlen ? ($covlen*100.00)/$curqlen : 0; 
 #return if ($mincov && $cov<$mincov); #failed coverage condition
 
 my $hasCDSonly; # for pblat or some GTF file, we may have no exon segments
 if (@exd==0) {
   @exd=sort { $main::a->[0] <=> $main::b->[0] } @cds; 
   $hasCDSonly=1;
   @cds=();
   }
  else {
   @exd = sort { $main::a->[0] <=> $main::b->[0] } @exd;
   @cds = sort { $main::a->[0] <=> $main::b->[0] } @cds;
   }
 my $prev_end=0;
 #my $covscore=0;
 my $i=0;
 my $numexons=0;
 my @fexd; #filtered set of exons
 my $qcovlen=0; #total aligned length
 my $gcovlen=0; #covered length (in nucleotides)
 my $covscore=0;
 foreach my $x (@exd) {
   $i++;
   my $xpid = ($$x[3]>=10 && $$x[3]<=100.0)? $$x[3] : 0;
   next if ($xpid && $xpid<$xminpid && (($i>1 && $i<@exd) || @exd==1)); #skip internal exons with lower pid
   if ($prev_end>0) {
      my $intronlen=$$x[0]-$prev_end;
      return if $intronlen>$maxintron;
      }
   $prev_end=$$x[1];
   $covscore+=($$x[1]-$$x[0]+1)*$xpid;
   $gcovlen+=($$x[1]-$$x[0]+1);   
   $qcovlen+=($$x[5]-$$x[4]+1) if $$x[5]>0;
   push(@fexd, $x);
   $numexons++;
   }
 return if @fexd==0;
 if ($g_range) {
   if ($xrange) {
    #everything that intersects given range
    return if ($gstart>$maxcoord || $gend<$mincoord);
    }
   else {
    return unless ($gstart>=$mincoord && $gend<=$maxcoord);
    }
   }
 return if ($fltstrand && $gstrand ne $fltstrand);
 my $totpid=sprintf('%.2f',$covscore/$gcovlen);
 my $qlen=$curqlen; #query length, in nucleotides
 my $qcov = ($qcovlen>5 && $qlen>0) ? ($qcovlen*100.00)/$qlen : $curcov;
 #print STDERR "=====> gffID: $gffid  qcov=$qcov\n";
 return if ($numexons<1 || ($totpid>10 && $totpid<$minpid) || ($qcov && $qcov<$mincov));
 #my ($parent)=($ginfo=~m/\bID\s*=\s*([^;]+)/);
 my $parent=$gffid;
 if ($curqry) {
   my $q=$dups{$curqry} || $curqry;
   my $uid="$gchr|$q|$gstart|$gend|$qcov";
   return if exists($uniq{$uid});
   $uniq{$uid}=1;
   }
 if ($addCounter) {
   if ($fullRename) {
     $globalCounter++;
     $parent=$addCounter.$globalCounter;
     }
    else { 
     die("Error: no curqry available for gff ID: $gffid!\n") unless $curqry;
     my $mnum = ++$n{$curqry};
     $parent=$curqry.'.'.$addCounter.$mnum;
     }
   
   }
 my $gffattrs="ID=$parent";
 my $gffname=$gname || $parent;
 if ($stripAttrs || $resetName) {
    $gffname=$parent;
    } 
 $gffattrs.=";Name=$gffname"; #just use a name there so argo can show it
 
 if ($use_tcoords) {
   my @td=sort { $main::a->[4] <=> $main::b->[4] } @fexd;
   $curqstart=$td[0]->[4];
   $curqend=$td[-1]->[5];
   }
 if ($qcov>1) {
   $qcov=100 if $qcov>100;
   $gffattrs.=';cov='.sprintf('%.1f',$qcov) unless $stripAttrs;
   }
 unless ($totpid>0) {
    $totpid=$gscore if $gscore>10 && $gscore<=100.0;
    }
 unless ($covscore) {
    my $rqlen=$qlen;
    $rqlen*=3 if $pmap;
    $covscore=(($rqlen*$qcov)/100.00)*$totpid;
    }
 unless ($stripAttrs) {
  $gffattrs.=';pid='.sprintf('%.2f',$totpid) if $totpid>2; # unless $ginfo=~m/Identity=/;
  $gffattrs.=';covscore='.sprintf('%d',$covscore) if $covscore>10; 
 #$ginfo.=';score='.sprintf('%d',($eScore/100.00)) unless $ginfo=~m/score=/i;
 if ($curqstart && $curqend) {
   $gffattrs.=";qreg=$curqstart-$curqend";
   $gffattrs.="|$curqlen" if $curqlen;
   }
 else {
   $gffattrs.=';qlen='.$curqlen if $curqlen;
   }
  }
 my ($gffdescr)=($ginfo=~m/\b(?:descr|info)=\"([^"]+)/);
 unless ($stripAttrs) { 
 $ginfo=~s/;$//;
 $ginfo=~s/^;//;
 if ($curdescr) {
   $curdescr =~ tr/"\t;=/' .:/s;  #"  
   $curdescr=~s/[\.\;\, ]+$//;
   $ginfo=~s/\b(?:descr|info)=\"[^"]+\"\s*;?//i;
   if ($ginfo) {
      $ginfo.=';descr="'.$curdescr.'"';
      }
    else { $ginfo=';descr="'.$curdescr.'"'; }
   }
 $gffattrs.=";$ginfo" if $ginfo;
 }
 $gffattrs=~tr/; /; /s;
 
 my $gfftrack= $ntrack || $gtrack;  
print join("\t", $gchr, $gfftrack, 'mRNA', $gstart, $gend, $gscore, $gstrand, '.', $gffattrs)."\n" unless $GTF;
# exons:
my $fonly=$outFeat;
if ($outFeat) {
  $fonly=$outFeat;
  }
 else {
  $fonly= $hasCDSonly ? 'CDS':'exon';
  }
my $wroteExons=0;
if (!$inFeat || ($inFeat eq 'exon') || $hasCDSonly) {
  $wroteExons=1;
  foreach my $x (@fexd) {     
     my $xinfo="Parent=$parent";
     unless ($stripAttrs) {
      $xinfo.=";qreg=$$x[4]-$$x[5]" if ($$x[4]>0);
      $$x[6]=~s/^;+//;
      $xinfo.=";$$x[6]" if $$x[6];
      }
     print join("\t", $gchr, $gfftrack, $fonly, $$x[0], $$x[1], $$x[3], $gstrand, $$x[2],$xinfo)."\n";
     }
  }
if ($fmapout) {
  my $descr=$curdescr || $gffdescr;
  print FMAP join("\t", $gchr, $gstrand, $gstart, $gend, $curqry, sprintf('%d',$covscore),
              sprintf('%.1f',$totpid), sprintf('%.1f',$qcov), "$curqstart-$curqend|$curqlen", $descr)."\n";
  }
return if ($outFeat &&  $wroteExons);
$fonly=$outFeat || 'CDS';
if (@cds>0 && (!$inFeat || ($inFeat eq 'CDS'))) {
  foreach my $x (@cds) {
     my $xinfo="Parent=$parent";
     unless ($stripAttrs) {
      $xinfo.=";qreg=$$x[4]-$$x[5]" if ($$x[4]>0);
      $$x[6]=~s/^;+//;
      $xinfo.=";$$x[6]" if $$x[6];
      }
     print join("\t", $gchr, $gfftrack, $fonly, $$x[0], $$x[1], $$x[3], $gstrand, $$x[2], $xinfo)."\n";
    }
  }
}#sub flush_gbuf()
