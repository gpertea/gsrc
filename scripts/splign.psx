#!/usr/bin/perl
use strict;
use FindBin;

umask 0002;
#the line below is needed if pvmsx is used
# also, the error condition is set only by the presence of $file 
$ENV{'PATH'}=$FindBin::Bin.':'.$ENV{'PATH'};

#so for pvmsx to consider the task was successful, $file must be deleted!
#============== 
# 1 is the name of the fasta sequence input file
# 2 is the # of sequences in ${1} should = 1 for this script
# 3 is the slice no. being processed by sx
# 4 is 0 if not the last file, 1 if the last file
# 5 is the # of sequences skipped initially
# 6 is the # of sequences to be processed (-1 = ALL)
# 7 user parameter
#     1        2        3         4          5       6    
my ($file, $numpass, $slice_num, $last, $skipped, $total, $dbfile)=@ARGV;
my $splign_res=$file.'.splign1';
my $splign_allres='worker.splign';
my $log_file='log_std';
my $err_file='err_log';
open(STDERR, '>>'.$err_file);
open(STDOUT, '>>'.$log_file);

#my $toskip=($file =~ m/_\@(\d+)_v\d+\.\d+/) ? $1 : $skipped+$numpass*($slice_num-1);
#my $fmasked=$file.'_msk.fa';
#my $ftrimcoords=$file.'_msk.trim';
#my $prepcmd="mdust -v32 -mN < $file | trimpoly -n30.00 -o $fmasked > $ftrimcoords";
#&runCmd($prepcmd);
my $cmd="splign -query $file -subj $dbfile -W 20 > $splign_res";
my $slno=sprintf("slice:%09d",$slice_num);
print STDERR ">>$slno: $cmd\n";
&runCmd($cmd, $splign_res);
if (-s $splign_res) {
 system("cat $splign_res >> $splign_allres") &&
   die ("Error at appending $splign_res to $splign_allres !\n");
 }
unlink ($splign_res); 
print STDERR "<<$slno: done.\n";



#$cmd="sort -k11,11g -k10,10nr -k9,9nr $mgblast_res | bzip2 -cf > $mgblast_res.bz2";
#my $r=system($cmd);
#if ($r && ($r>>8 != 2) ) {
#   die "Error sorting/compressing the results file '$mgblast_res'\n$cmd\n";
#   }
unlink($file);
#unlink($fmasked);
exit 0;

sub runCmd {
my ($docmd, @todel) = @_;
my $errmsg = `($docmd) 2>&1`;
if ($? || ($errmsg=~/ERROR/si) || ($errmsg=~/Segmentation/si) || ($errmsg=~/Failed/s) || $errmsg=~/Invalid/s) {
  print STDERR "!Error at:\n$docmd\n";
  print STDERR "$errmsg\n";
  foreach (@todel) {
    unlink($_);
    }
  exit(1);
  }
}
